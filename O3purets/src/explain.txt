-------------------------Getter and setters-------------------------------------------
==>GETTRS: are used to access the properties of a class usually private properties , 
          so that you can make an addition information or logic

==>SETTERS:-->the setters don't have the return value

In general,setters and getters are used to access the properties of a classwith the intection of adding addition logic

 ------------------------------ABSTRACT--------------------------------------
 
The abstract keyword in TypeScript is used to define abstract classes and abstract methods. An abstract class cannot be instantiated, and it can only be used as a base class for other classes. An abstract method is a method that has no implementation and must be implemented by derived classes.

In your example, the abstract keyword is used before the getSepia() method declaration. This means that any class that extends the class containing this method must provide an implementation for it. Otherwise, the extending class will also need to be marked as abstract.

So, if a class extends the class containing getSepia(), it must provide an implementation for it using the override keyword. This ensures that any class derived from the base class must implement the getSepia() method

------------------------------GENERICS----------------------------------------------------
Example : function identity2<Type>(val:Type):Type{
    return val
}"
 .here It is known that this function is able of recieving any type of argument but the return  type  will the same as one of the argument 
 Unlike  for any which recieve any type and return any type 
-------------------------------------------DATATYPE NEVER ---------------------------------------------------
never is a type in TypeScript that represents a value that will never occur. A function with a return type of never indicates that the function will never return normally. This can happen,
 for example, when a function throws an error or enters an infinite loop.











